from telebot.types import ReplyKeyboardMarkup

from app_init import bot
from database_interfaces import GroupSettingsInterface
from keyboards import generate_main_group_keyboard
from keyboards import generate_text_back_keyboard
from pathlib import Path


def update_group_welcome_file_path(message, group_id, send_message_id):
    chat_id = message.chat.id
    bot.delete_message(chat_id, message.message_id)
    bot.delete_message(chat_id, send_message_id)
    if message.text != "üîô –ù–∞–∑–∞–¥":
        file = None
        if message.content_type == "photo":
            file = message.photo[0]
        elif message.content_type == "video":
            file = message.video
        elif message.content_type == "document":
            file = message.document
        else:
            bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª")
        if file is not None:
            save_dir = Path(Path.cwd(), "files")
            file_info = bot.get_file(file.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            src = Path(file_info.file_path).name
            save_path = Path(save_dir, src)
            with open(save_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            status = GroupSettingsInterface.update_group_settings(group_id, {"welcome_message_file_path": save_path})
            if "welcome_message_file_path" in status:
                bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    group_settings = GroupSettingsInterface.add_group_settings(group_id)
    kb = generate_main_group_keyboard(group_id)
    bot.send_message(chat_id, str(group_settings), reply_markup = kb)


def update_group_step_1(message, group_id, update_type, send_message_id):
    chat_id = message.chat.id
    bot.delete_message(chat_id, message.message_id)
    bot.delete_message(chat_id, send_message_id)
    if message.text != "üîô –ù–∞–∑–∞–¥":
        updated_keys = GroupSettingsInterface.update_group_settings(group_id, {update_type: message.text})
        if not update_type in updated_keys:
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        else:
            bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    group_settings = GroupSettingsInterface.add_group_settings(group_id)
    kb = generate_main_group_keyboard(group_id)
    bot.send_message(chat_id, str(group_settings), reply_markup = kb)


def update_group_callback(chat_id, message_id, call_args):
    bot.delete_message(chat_id, message_id)
    if len(call_args) >= 2:
        if GroupSettingsInterface.check_group_is_exists(call_args[0]):
            update_types = {
                "number_users_must": "number_users_for_invite_for_send_messages",
                "number_mes": "number_messages_per_day",
                "reach_max_number_mes": "reach_max_number_messages_per_day_text",
            }
            update_types_messages = {
                "welcome_message": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
                "number_users_for_invite_for_send_messages": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ "
                                                             "–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π",
                "number_messages_per_day": "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å",
                "time_for_send_messages_minutes": "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç–∞—Ö",
                "add_more_users_text": "–í–≤–µ–¥–∏—Ç–µ –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π",
                "reach_max_number_messages_per_day_text": "–í–≤–µ–¥–∏—Ç–µ –æ—à–∏–±–∫—É –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ "
                                                          "—Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å",
            }
            if call_args[1] in update_types:
                call_args[1] = update_types[call_args[1]]
            if call_args[1] in update_types_messages:
                kb = generate_text_back_keyboard()
                send_message = bot.send_message(chat_id, update_types_messages[call_args[1]], reply_markup = kb)
                bot.register_next_step_handler(send_message, update_group_step_1, group_id = call_args[0],
                                               update_type = call_args[1], send_message_id = send_message.id)
                return
            if call_args[1] == "w_is_on":
                welcome_message_is_on = True
                if call_args[2] == "False":
                    welcome_message_is_on = False
                updated_keys = GroupSettingsInterface.update_group_settings(call_args[0],
                                                                            {
                                                                                "welcome_message_is_on":
                                                                                    welcome_message_is_on
                                                                            })
                if "welcome_message_is_on" in updated_keys:
                    bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                else:
                    bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                group_settings = GroupSettingsInterface.add_group_settings(call_args[0])
                kb = generate_main_group_keyboard(call_args[0])
                bot.send_message(chat_id, str(group_settings), reply_markup = kb)
                return
            elif call_args[1] == "welcome_message_img":
                kb = generate_text_back_keyboard()
                send_message = bot.send_message(chat_id,
                                                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ "
                                                "—Å–æ–æ–±—â–µ–Ω–∏—é",
                                                reply_markup = kb)
                bot.register_next_step_handler(send_message, update_group_welcome_file_path,
                                               group_id = call_args[0], send_message_id = send_message.message_id)
                return
            bot.send_message(chat_id, "–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞")
        else:
            bot.send_message(chat_id, "–ó–∞–ø—Ä–æ—Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≥—Ä—É–ø–ø—ã")
    else:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
    group_settings = GroupSettingsInterface.add_group_settings(call_args[0])
    kb = generate_main_group_keyboard(call_args[0])
    bot.send_message(chat_id, str(group_settings), reply_markup = kb)
